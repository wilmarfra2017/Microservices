trigger:
- master

resources:
- repo: self

variables:
  - name: system.debug
    value: false
  - name: dockerHubServiceConnection
    value: 'DockerHubConnection'
  - name: tag
    value: '$(Build.BuildId)'
  - name: gatewayImage
    value: 'mart800749/gateway:$(tag)'
  - name: libreriaImage
    value: 'mart800749/libreria:$(tag)'
  - name: seguridadImage
    value: 'mart800749/seguridad:$(tag)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: __default
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Images to Docker Hub'
    steps:
      - task: Docker@2
        displayName: 'Build and Push Gateway Image'
        inputs:
          command: buildAndPush
          dockerfile: '$(Build.SourcesDirectory)/Servicios.api.Gateway/Dockerfile'
          repository: 'mart800749/gateway'
          tags: |
            $(tag)
          containerRegistry: $(dockerHubServiceConnection)
          addPipelineData: false
      - task: Docker@2
        displayName: 'Build and Push Libreria Image'
        inputs:
          command: buildAndPush
          dockerfile: '$(Build.SourcesDirectory)/Servicios.api.Libreria/Dockerfile'
          repository: 'mart800749/libreria'
          tags: |
            $(tag)
          containerRegistry: $(dockerHubServiceConnection)
          addPipelineData: false
      - task: Docker@2
        displayName: 'Build and Push Seguridad Image'
        inputs:
          command: buildAndPush
          dockerfile: '$(Build.SourcesDirectory)/Servicios.api.Seguridad/Dockerfile'
          repository: 'mart800749/seguridad'
          tags: |
            $(tag)
          containerRegistry: $(dockerHubServiceConnection)
          addPipelineData: false

  - job: UpdateK8sDeploymentFiles
    displayName: 'Update Kubernetes deployment files with new image tags'
    steps:
    - checkout: self
    - task: Bash@3
      displayName: 'Update Image Tags in K8s Deployment Files'
      inputs:
        targetType: 'inline'
        script: |
          echo "Verifying variables:"
          echo "gatewayImage: $(gatewayImage)"
          echo "libreriaImage: $(libreriaImage)"
          echo "seguridadImage: $(seguridadImage)"

          echo "Replacing image tags in deployment files:"
          sed -i "s|image: .*\/gateway:.*|image: $(gatewayImage)|g" "$(Build.SourcesDirectory)/gateway-deploy.yml"
          sed -i "s|image: .*\/libreria:.*|image: $(libreriaImage)|g" "$(Build.SourcesDirectory)/microservice.libreria.deploy.yml"
          sed -i "s|image: .*\/seguridad:.*|image: $(seguridadImage)|g" "$(Build.SourcesDirectory)/microservice-seguridad-deploy.yml"
              
          echo "Verifying changes in gateway-deploy.yml:"
          cat "${Build.SourcesDirectory}/gateway-deploy.yml"
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Updated Kubernetes Deployment Files'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)'
        ArtifactName: 'k8s'
        publishLocation: 'Container'

  - job: DeployToKubernetes
    displayName: 'Deploy to Kubernetes'
    dependsOn: UpdateK8sDeploymentFiles
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        mkdir $(Build.ArtifactStagingDirectory)/temp
      displayName: 'Create Temp Directory'
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'k8s'
        downloadPath: '$(Build.ArtifactStagingDirectory)/temp'
    - script: |
        ls -R $(Build.ArtifactStagingDirectory)/temp
      displayName: 'List contents of temp directory'
    - script: |
        cat $(Build.ArtifactStagingDirectory)/temp/gateway-deploy.yml
      displayName: 'Show gateway-deploy.yml contents'  
    - task: Kubernetes@1
      displayName: 'Deploy Gateway'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AKS-Service-Connection'
        azureResourceGroup: 'microservice-resourcegroup'
        kubernetesCluster: 'microservices-cluster'
        command: apply
        arguments: '-f $(Build.ArtifactStagingDirectory)/temp/gateway-deploy.yml --namespace production'
    - task: Kubernetes@1
      displayName: 'Deploy Libreria'
      inputs:        
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AKS-Service-Connection'
        azureResourceGroup: 'microservice-resourcegroup'
        kubernetesCluster: 'microservices-cluster'
        command: apply
        arguments: '-f $(Build.ArtifactStagingDirectory)/temp/microservice.libreria.deploy.yml --namespace production'

    - task: Kubernetes@1
      displayName: 'Deploy Seguridad'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AKS-Service-Connection'
        azureResourceGroup: 'microservice-resourcegroup'
        kubernetesCluster: 'microservices-cluster'
        command: apply
        arguments: '-f $(Build.ArtifactStagingDirectory)/temp/microservice-seguridad-deploy.yml --namespace production'

    - task: Kubernetes@1
      displayName: 'Deploy MongoDB'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AKS-Service-Connection'
        azureResourceGroup: 'microservice-resourcegroup'
        kubernetesCluster: 'microservices-cluster'
        command: apply
        arguments: '-f $(Build.ArtifactStagingDirectory)/temp/mongo-deploy.yml --namespace production'

    - task: Kubernetes@1
      displayName: 'Deploy SQL Server'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AKS-Service-Connection'
        azureResourceGroup: 'microservice-resourcegroup'
        kubernetesCluster: 'microservices-cluster'
        command: apply
        arguments: '-f $(Build.ArtifactStagingDirectory)/temp/sqlserver-deploy.yml --namespace production'
